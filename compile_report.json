{"functions":{"create_static_narrative":{"name":"create_static_narrative","comment":"Creates a static Narrative from the given Narrative ref string.","place":null,"input":[{"type":"StaticNarrative.CreateStaticNarrativeInput","comment":"narrative_ref - the reference to the Narrative object to make a static version of.\n                must include version!\noverwrite - if true, overwrite any previous version of the static Narrative."}],"output":[{"type":"StaticNarrative.CreateStaticNarrativeOutput","comment":""}]},"get_static_narrative_info":{"name":"get_static_narrative_info","comment":"Returns info about a created static narrative, given the workspace id.\nIf no static narrative has been created, returns an empty structure.","place":null,"input":[{"type":"StaticNarrative.GetStaticNarrativeInfo","comment":""}],"output":[{"type":"StaticNarrative.StaticNarrativeInfo","comment":"ws_id - the workspace id\nnarrative_id - the id of the narrative object made static\nnarrative_version - the version of the narrative object saved\nurl - the url of the static narrative (just the path, the Narrative front end should provide the host)\nnarr_saved - ms since epoch of when the narrative that was made static was saved.\nstatic_saved - ms since epoch of when the static narrative was saved"}]},"list_static_narratives":{"name":"list_static_narratives","comment":"","place":null,"input":[],"output":[{"type":"StaticNarrative.AllStaticNarratives","comment":""}]},"status":{"name":"status","comment":"Return the status of this dynamic service","place":null,"input":[],"output":[{"type":"StaticNarrative.Status","comment":"state - a string, either OK or ...(TBD)\nmessage - optional, some message about the state of the service.\nversion - a semantic version string.\ngit_url - the GitHub URL where this service code is stored.\ngit_commit_hash - the Git commit hash for the running version of this service."}]}},"module_name":"StaticNarrative","sdk_version":"1.2.6","sdk_git_commit":"28f15f5826af59341742b4cffbad4d9c1c16e3f1","impl_file_path":"lib/StaticNarrative/StaticNarrativeImpl.py","spec_files":[{"content":"/*\nA KBase module: StaticNarrative\n*/\n\nmodule StaticNarrative {\n    /* allowed 0 or 1 */\n    typedef int boolean;\n\n    /* a workspace id */\n    typedef int ws_id;\n\n    /* a workspace object reference string (of the form wsid/objid/ver) */\n    typedef string ws_ref;\n\n    typedef string url;\n\n    /*\n        narrative_ref - the reference to the Narrative object to make a static version of.\n                        must include version!\n        overwrite - if true, overwrite any previous version of the static Narrative.\n    */\n    typedef structure {\n        ws_ref narrative_ref;\n        boolean overwrite;\n    } CreateStaticNarrativeInput;\n\n    typedef structure {\n        url static_narrative_url;\n    } CreateStaticNarrativeOutput;\n\n    /*\n        Creates a static Narrative from the given Narrative ref string.\n    */\n    funcdef create_static_narrative(CreateStaticNarrativeInput params) returns (CreateStaticNarrativeOutput output) authentication required;\n\n    typedef structure {\n        ws_id ws_id;\n    } GetStaticNarrativeInfo;\n\n    /*\n        ws_id - the workspace id\n        narrative_id - the id of the narrative object made static\n        narrative_version - the version of the narrative object saved\n        url - the url of the static narrative (just the path, the Narrative front end should provide the host)\n        narr_saved - ms since epoch of when the narrative that was made static was saved.\n        static_saved - ms since epoch of when the static narrative was saved\n    */\n    typedef structure {\n        ws_id ws_id;\n        int narrative_id;\n        int narrative_version;\n        url url;\n        int narr_saved;\n        int static_saved;\n    } StaticNarrativeInfo;\n\n    /*\n        Returns info about a created static narrative, given the workspace id.\n        If no static narrative has been created, returns an empty structure.\n    */\n    funcdef get_static_narrative_info(GetStaticNarrativeInfo params) returns (StaticNarrativeInfo info) authentication required;\n\n\n\n    typedef structure {\n        int count;\n        mapping<ws_id, StaticNarrativeInfo> narratives;\n    } AllStaticNarratives;\n\n    funcdef list_static_narratives() returns (AllStaticNarratives narratives);\n\n    /*\n        state - a string, either OK or ...(TBD)\n        message - optional, some message about the state of the service.\n        version - a semantic version string.\n        git_url - the GitHub URL where this service code is stored.\n        git_commit_hash - the Git commit hash for the running version of this service.\n    */\n    typedef structure {\n        string state;\n        string message;\n        string version;\n        string git_url;\n        string git_commit_hash;\n    } Status;\n    /*\n        Return the status of this dynamic service\n    */\n    funcdef status() returns (Status);\n};\n","file_name":"StaticNarrative.spec","is_main":1}],"function_places":{}}